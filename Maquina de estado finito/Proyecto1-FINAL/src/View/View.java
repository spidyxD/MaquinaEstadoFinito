/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controler.Controller;
import Model.Line;
import Model.Model;
import Model.State;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.*;

/**
 *
 * @author Addiel
 */
public class View extends javax.swing.JFrame implements Observer{
   public Graphics g1;
   FileOutputStream exit;
   public JFileChooser fc = new JFileChooser();
   public JFileChooser f = new JFileChooser();
    /**
     * Creates new form View
     */
public View() {
    initComponents();
}
    
@Override
@SuppressWarnings("empty-statement")
public void paint(Graphics g) {
    this.g1 = g;
    super.paint(this.g1);
    State s;
    Line l;
    this.g1.setColor(Color.black);
    for(int i=0; i<model.getLinks().size();i++){
        l = model.getLinks().get(i);
        if(l.getOrg().getX() != l.getDest().getX() && l.getOrg().getY() != l.getDest().getY()){
        g1.drawLine(l.getOrg().getX()+32,l.getOrg().getY()+32,l.getDest().getX()+32,l.getDest().getY()+32);
        g1.drawString(l.getName(),(l.getOrg().getX()+l.getDest().getX())/2+20,(l.getOrg().getY()+l.getDest().getY())/2+30);
        }else{
        g1.drawRect(l.getOrg().getX()+45,l.getDest().getY()-10,30,30);
        g1.drawString(l.getName(),l.getOrg().getX()+77,l.getOrg().getY()+12);
        g1.fillArc(l.getDest().getX()+42, l.getDest().getY()-5, 9, 9, 360, 360);
            }

        }
    for(int i=0; i<model.getStates().size();i++){
       s = model.getStates().get(i);
        switch(model.getStates().get(i).getState()){            /** switch para cambiar el color del estado dependiendo el tipo seleccionado*/

            case 1:
            this.g1.setColor(Color.blue);break;
            case 2:
            this.g1.setColor(Color.green);break; 
            case 3:
            this.g1.setColor(Color.red);break;
            default: break;
        }
        this.g1.fillArc(s.getX(),s.getY(), 64, 64, 360, 360);
        this.g1.setColor(Color.white);
        this.g1.drawString(s.getName(),s.getX()+25,s.getY()+35);
        }

    }
    
public void clean(){
    this.repaint();
    this.setVisible(true);
    }
public JFileChooser getAbrirArchivo(){
    try{
        abrirArchivo.setDialogTitle("Recuperar");
        FileNameExtensionFilter filter = new FileNameExtensionFilter ("archivo xml","xml");
        abrirArchivo.setFileFilter (filter);
        abrirArchivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
    if(abrirArchivo.showOpenDialog(null)==abrirArchivo.APPROVE_OPTION) { 
        System.out.println ("Abriendo archivo :" + 
        abrirArchivo.getSelectedFile().getPath());
        InputStream st=new FileInputStream(abrirArchivo.getSelectedFile());
        model.recuperar(st);
        }
    }catch(Exception e){}
        return abrirArchivo;
}
public JFrame getVentanaCargar(){
        return ventanaCargar;
}
public JFileChooser getGuardarArchivo() throws FileNotFoundException {
    try{
        FileNameExtensionFilter filter = new FileNameExtensionFilter ("archivo xml","xml");
        guardarArchivo.setFileFilter (filter);
        guardarArchivo.setDialogTitle("Guardar");
        guardarArchivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
    if(guardarArchivo.showSaveDialog(null)==guardarArchivo.APPROVE_OPTION){ 
        guardarArchivo.setDialogTitle("Guardar");
        OutputStream st=new FileOutputStream(guardarArchivo.getSelectedFile());
        model.guardar(st);
        }
    }catch(Exception ex){}
        return guardarArchivo;
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        seleccionadorArchivo = new javax.swing.JFileChooser();
        saveChooser = new javax.swing.JFileChooser();
        guardarArchivo = new javax.swing.JFileChooser();
        abrirArchivo = new javax.swing.JFileChooser();
        ventanaCargar = new javax.swing.JFrame();
        mainMenu = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        guardar = new javax.swing.JMenuItem();
        recuperar = new javax.swing.JMenuItem();
        limpiar = new javax.swing.JMenuItem();
        estado = new javax.swing.JMenu();
        inicial = new javax.swing.JMenuItem();
        intermedio = new javax.swing.JMenuItem();
        Final = new javax.swing.JMenuItem();
        hilera = new javax.swing.JMenu();
        Hilera = new javax.swing.JMenuItem();

        jMenu4.setText("jMenu4");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        javax.swing.GroupLayout ventanaCargarLayout = new javax.swing.GroupLayout(ventanaCargar.getContentPane());
        ventanaCargar.getContentPane().setLayout(ventanaCargarLayout);
        ventanaCargarLayout.setHorizontalGroup(
            ventanaCargarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        ventanaCargarLayout.setVerticalGroup(
            ventanaCargarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        file.setText("Archivo");

        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        file.add(guardar);

        recuperar.setText("Recuperar");
        file.add(recuperar);

        limpiar.setText("Limpiar");
        file.add(limpiar);

        mainMenu.add(file);

        estado.setText("Estado");

        inicial.setText("Inicial");
        estado.add(inicial);

        intermedio.setText("Intermedio");
        estado.add(intermedio);

        Final.setText("Final");
        estado.add(Final);

        mainMenu.add(estado);

        hilera.setText("Verificar");

        Hilera.setText("Hilera");
        hilera.add(Hilera);

        mainMenu.add(hilera);

        setJMenuBar(mainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 644, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guardarActionPerformed

    /**
     * @param args the command line arguments
     */
public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
        new View().setVisible(true);
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JMenuItem Final;
    public javax.swing.JMenuItem Hilera;
    public javax.swing.JFileChooser abrirArchivo;
    public javax.swing.JMenu estado;
    private javax.swing.JMenu file;
    public javax.swing.JMenuItem guardar;
    public javax.swing.JFileChooser guardarArchivo;
    private javax.swing.JMenu hilera;
    public javax.swing.JMenuItem inicial;
    public javax.swing.JMenuItem intermedio;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    public javax.swing.JMenuItem limpiar;
    public javax.swing.JMenuBar mainMenu;
    public javax.swing.JMenuItem recuperar;
    public javax.swing.JFileChooser saveChooser;
    public javax.swing.JFileChooser seleccionadorArchivo;
    private javax.swing.JFrame ventanaCargar;
    // End of variables declaration//GEN-END:variables

Model model;
Controller controller;
public void setModel(Model model) {
    this.model=model;
    model.addObserver(this);
}

public void setController(Controller controller) {
   this.controller = controller;
    inicial.addActionListener(controller);
    intermedio.addActionListener(controller);
    Final.addActionListener(controller);
    Hilera.addActionListener(controller);
    guardar.addActionListener(controller);
    abrirArchivo.addActionListener(controller);
    guardarArchivo.addActionListener(controller);
    recuperar.addActionListener(controller);
    limpiar.addActionListener(controller);
    hilera.addActionListener(controller);
    this.addMouseListener(controller);
    this.addMouseMotionListener(controller);
}

@Override
public void update(Observable o, Object o1) {
     this.repaint();
}




}
